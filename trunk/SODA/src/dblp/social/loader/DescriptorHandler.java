package dblp.social.loader;

import java.io.File;
import java.util.ArrayList;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * This class defines an event handler used to parse the _partsInfo xml file generated by a previous execution of the pre parser
 * 
 * @author Staffiero
 *
 */
public class DescriptorHandler extends DefaultHandler{
	private static final String SOURCE = "source-file";
	private static final String PART = "part-file";
	private static final String TOTAL_CHECKPOINTS = "total-checkpoints";
	private static final String CHECKPOINTS_STEP = "checkpoints-step";
	private static final String PATH = "path";
	private static final String CHECKPOINTS = "checkpoints";
	private static final String LAST_CHECKPOINT = "last-checkpoint";
	private static final String LAST_OFFSET = "last-offset";
	private static final String COMPLETE = "complete";
	
	private String currElement;
	private int checkpointStep;
	private String sourceFile;
	private ArrayList<String> currElementValue = new ArrayList<String>();
	private ArrayList<PartFile> partFiles=null;
	private PartFile currPart =null;
	
	/**
	 * The constructor to be used. 
	 * @param partFiles the array to be filled
	 */
	public DescriptorHandler(ArrayList<PartFile> partFiles) {
		super();
		this.partFiles = partFiles;
	}

	@Override
	public void characters(char ch[], int start, int length) throws SAXException {
		String nodeValue = new String(ch,start,length);
		this.currElementValue.add(nodeValue);
	}

	@Override
	public void endDocument() throws SAXException {
		for (PartFile p : this.partFiles ){
			p.setSource(this.sourceFile);
			p.setCheckpointsStep(this.checkpointStep);
		}
	}

	@Override
	public void startDocument() throws SAXException {
		super.startDocument();
	}

	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		
		if(localName.compareTo(SOURCE)==0){
			this.currElement = SOURCE;
		}
		if (localName.compareTo(PART)==0){
			this.currElement = PART;
			this.currPart = new PartFile();
		}
		if (localName.compareTo(TOTAL_CHECKPOINTS)==0){
			this.currElement = TOTAL_CHECKPOINTS;
		}
		if (localName.compareTo(CHECKPOINTS_STEP)==0){
			this.currElement = CHECKPOINTS_STEP;
		}
	}
	
	@Override
	public void endElement(String uri, String localName, String qName)
			throws SAXException {
		if(localName.compareTo(PATH)==0){
			if (this.currElement.compareTo(SOURCE)==0){
				this.sourceFile = "";
				for(String frag : this.currElementValue)
					this.sourceFile = this.sourceFile + frag;
				this.sourceFile = cleanString(this.sourceFile);
			}else if(this.currElement.compareTo(PART)==0){
				String filePath = "";
				for(String frag : this.currElementValue)
					filePath = filePath + frag;
				File file = new File(cleanString(filePath));
				this.currPart.setFile(file);
			}
		}
		else if(localName.compareTo(CHECKPOINTS)==0){
			String checkpoints="";
			for(String frag : this.currElementValue)
				checkpoints = checkpoints + frag;
			this.currPart.setCheckpoints(Integer.parseInt(cleanString(checkpoints)));
		}
		else if(localName.compareTo(CHECKPOINTS_STEP)==0){
			String totalCheckpoints="";
			for(String frag : this.currElementValue)
				totalCheckpoints = totalCheckpoints + frag;
			this.checkpointStep = Integer.parseInt(cleanString(totalCheckpoints));
		}else if(localName.compareTo(LAST_CHECKPOINT)==0){
			String currCheckpoints="";
			for(String frag : this.currElementValue)
				currCheckpoints = currCheckpoints + frag;
			this.currPart.setLastCheckpoint(Integer.parseInt(cleanString(currCheckpoints)));
		}else if(localName.compareTo(LAST_OFFSET)==0){
			String currOffset="";
			for(String frag : this.currElementValue)
				currOffset = currOffset + frag;
			this.currPart.setLastOffset(Integer.parseInt(cleanString(currOffset)));
		}else if(localName.compareTo(COMPLETE)==0){
			String complete="";
			for(String frag : this.currElementValue)
				complete = complete + frag;
			complete = cleanString(complete);
			if (complete.compareTo("false")==0)
				this.currPart.setComplete(false);
			else 
				this.currPart.setComplete(true);
		}else if(localName.compareTo(PART)==0 && !this.currPart.isComplete()){
			this.partFiles.add(this.currPart);
		}
		
		this.currElementValue = new ArrayList<String>();
	}
	
	protected static String cleanString(String string){
		String res = string.replaceAll("\n", "");
		res = res.replaceAll("\t", "");
		return res;
	}
	 
}
